{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 317e4ceb8e9b834c2c1f","webpack:///./src/index.js","webpack:///./src/immutable-push.js","webpack:///./src/immutable-pop.js","webpack:///./src/immutable-shift.js","webpack:///./src/immutable-unshift.js","webpack:///./src/immutable-splice.js","webpack:///./src/immutable-reverse.js","webpack:///./src/immutable-sort.js","webpack:///./src/immutable-delete.js"],"names":["push","pop","shift","unshift","splice","reverse","sort","del","immutablePush","array","elementN","immutablePop","slice","immutableShift","immutableUnshift","immutableSplice","start","length","deleteCount","immutableReverse","immutableSort","compareFunction","immutableDelete","index"],"mappings":"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","file":"immutableArrays.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"immutableArrays\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"immutableArrays\"] = factory();\n\telse\n\t\troot[\"immutableArrays\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 317e4ceb8e9b834c2c1f","import immutablePush from './immutable-push';\nimport immutablePop from './immutable-pop';\nimport immutableShift from './immutable-shift';\nimport immutableUnshift from './immutable-unshift';\nimport immutableSplice from './immutable-splice';\nimport immutableReverse from './immutable-reverse';\nimport immutableSort from './immutable-sort';\nimport immutableDelete from './immutable-delete';\n\nexport const push = immutablePush;\nexport const pop = immutablePop;\nexport const shift = immutableShift;\nexport const unshift = immutableUnshift;\nexport const splice = immutableSplice;\nexport const reverse = immutableReverse;\nexport const sort = immutableSort;\nexport const del = immutableDelete;\n\nexport default {\n  push: immutablePush,\n  pop: immutablePop,\n  shift: immutableShift,\n  unshift: immutableUnshift,\n  splice: immutableSplice,\n  reverse: immutableReverse,\n  sort: immutableSort,\n  del: immutableDelete\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","/**\n * Adds one or more elements to the end of an array by returning\n * a new array instead of mutating the original one.\n *\n * @param {Array} array The original array.\n * @param {*} elementN The elements to add to the end of the array.\n * @return {Array} A new array with the new entries added to the end.\n * @example\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = immutablePush(originalArray, 'f', 'g');\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n */\nexport default function immutablePush(array, ...elementN) {\n  return [...array, ...elementN];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/immutable-push.js","/**\n * Removes the last element from an array by returning\n * a new array instead of mutating the original one.\n *\n * @param {Array} array The original array.\n * @return {Array} A new array with the last element removed.\n * @example\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = immutablePop(originalArray);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['a', 'b', 'c', 'd']\n */\nexport default function immutablePop(array) {\n  return array.slice(0, -1);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/immutable-pop.js","/**\n * Removes the first element from an array.\n *\n * @param {Array} array The original array.\n * @return {Array} A new array with the first element removed.\n * @example\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = immutableShift(originalArray);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['b', 'c', 'd', 'e']\n */\nexport default function immutableShift(array) {\n  return array.slice(1);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/immutable-shift.js","/**\n * Adds one or more elements to the beginning of an array.\n *\n * @param {Array} array The original array.\n * @param {*} elementN [description] The elements to add to the front of the array.\n * @return {Array} A new array with the new elements added to the front.\n * @example\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = immutableUnshift(originalArray, 'f', 'g');\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['f', 'g', 'a', 'b', 'c', 'd', 'e']\n */\nexport default function immutableUnshift(array, ...elementN) {\n  return [...elementN, ...array];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/immutable-unshift.js","/**\n * Removes existing elements and/or adds new elements to an array.\n *\n * @param {Array} array The original array.\n * @param {Number} [start = array.length]\n *        Zero based index at which to start changing the array.\n *        If greater than the length of the array, actual starting index will be set to the length of the array.\n * @param {Number} [deleteCount = array.length - start]\n *        An integer indicating the number of old array elements to remove.\n *        If `deleteCount` is 0, no elements are removed.\n *        If `deleteCount` is lower than 0, `deleteCount` will be equal to 0.\n *        If `deleteCount` is greater than the number of elements left in the array starting at\n *        `start`, then all of the elements through the end of the array will be deleted.\n *        If `deleteCount` is omitted, `deleteCount` will be equal to (`array.length - start`),\n *        i.e., all of the elements beginning with `start` index on through the end of the array will be deleted.\n * @param {*} [elementN]\n *        The elements to add to the array, beginning at the start index.\n *        If you don't specify any elements, will only remove elements from the array.\n * @return {Array} The result array.\n *\n * @example\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = immutableSplice(originalArray, 0);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray []\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = immutableSplice(originalArray, 0, 1);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['b', 'c', 'd', 'e']\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = immutableSplice(originalArray, 0, 3);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['d', 'e']\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = immutableSplice(originalArray, 0, originalArray.length);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray []\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = immutableSplice(originalArray, 0, -3);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['a', 'b', 'c', 'd', 'e']\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = immutableSplice(originalArray, 0, 0, 'lorem', 'ipsum');\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['lorem', 'ipsum', 'a', 'b', 'c', 'd', 'e']\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = immutableSplice(originalArray, originalArray.length, 0, 'lorem', 'ipsum');\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['a', 'b', 'c', 'd', 'e', 'lorem', 'ipsum']\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = immutableSplice(originalArray, 0, 2, 'lorem', 'ipsum');\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['lorem', 'ipsum', 'c', 'd', 'e']\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = immutableSplice(originalArray, originalArray.length - 2, 2, 'lorem', 'ipsum');\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['a', 'b', 'c', 'lorem', 'ipsum']\n */\nexport default function immutableSplice(array, start = array.length, deleteCount = array.length - start, ...elementN) {\n  return [\n    ...array.slice(0, start),\n    ...elementN,\n    ...array.slice(start + (deleteCount < 0 ? 0 : deleteCount))\n  ];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/immutable-splice.js","/**\n * Reverses an array (not in place).\n * The first array element becomes the last, and the last array element becomes the first.\n *\n * @param {Array} array The original array.\n * @return {Array} A new array reversed.\n * @example\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = immutableReverse(originalArray);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['e', 'd', 'c', 'b', 'a']\n */\nexport default function immutableReverse(array) {\n  return [...array].reverse();\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/immutable-reverse.js","/**\n * Sorts the elements of an array (not in place) and returns a sorted array.\n *\n * @param {Array} array The original array.\n * @param {Function} [compareFunction] Specifies a function that defines the sort order.\n *        If omitted, the array is sorted according to each character's Unicode code point value, according to the string conversion of each element.\n * @return {Array} A new sorted array.\n * @example\n *\n * const numberArray = [20, 3, 4, 10, -3, 1, 0, 5];\n * const stringArray = ['Blue', 'Humpback', 'Beluga'];\n *\n * const resultArray = immutableSort(numberArray, (a, b) => a - b);\n * // -> numberArray [20, 3, 4, 10, -3, 1, 0, 5]\n * // -> resultArray [-3, 0, 1, 3, 4, 5, 10, 20]\n *\n * const resultArray = immutableSort(numberArray, (a, b) => b - a);\n * // -> numberArray [20, 3, 4, 10, -3, 1, 0, 5]\n * // -> resultArray [20, 10, 5, 4, 3, 1, 0, -3]\n *\n * const resultArray = immutableSort(stringArray);\n * // -> stringArray ['Blue', 'Humpback', 'Beluga']\n * // -> resultArray ['Beluga', 'Blue', 'Humpback']\n *\n * const resultArray = immutableSort(stringArray, (a, b) => a.toLowerCase() < b.toLowerCase());\n * // -> stringArray ['Blue', 'Humpback', 'Beluga']\n * // -> resultArray ['Humpback', 'Blue', 'Beluga']\n */\nexport default function immutableSort(array, compareFunction) {\n  return [...array].sort(compareFunction);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/immutable-sort.js","/**\n * Deletes an element from an array by its index in the array.\n *\n * @param {Array} array The original array.\n * @param {Number} index The index of the element to delete in the original array. If index is a negative number, the original array is returned.\n * @return {Array} A new array with the element removed.\n * @example\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = immutableDelete(originalArray, 2);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['a', 'b', 'd', 'e']\n *\n * const resultArray2 = immutableDelete(originalArray, -1);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray2 ['a', 'b', 'c', 'd', 'e']\n */\nexport default function immutableDelete(array, index) {\n  return index >= 0 ? [...array.slice(0, index), ...array.slice(index + 1)] : array;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/immutable-delete.js"],"sourceRoot":""}